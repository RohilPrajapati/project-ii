<!-- <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> -->

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"
    integrity="sha512-UXumZrZNiOwnTcZSHLOfcTs0aos2MzBWHXOHOuB0J/R44QB0dwY5JgfbvljXcklVf65Gc4El6RjZ+lnwd2az2g=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-zoom/0.7.7/chartjs-plugin-zoom.min.js"></script>

<div class="chart_div">
    <canvas id="myChart" style="width:100%;" class="chart"></canvas>
</div>
{# <div class="action_graph">
    <button class="" onclick="switchChartType()">Switch</button>
</div> #}
<script>
    // Get the canvas element
    var canvas = document.getElementById('myChart');
    // canvas.height = '80%';
    canvas.width = '100%';
    var ctx = canvas.getContext('2d');

    // Set initial chart type
    var chartType = 'scatter';


    // Set initial chart data
    var g_data = {
        datasets: [
            {
                // label: 'Scatter Chart',
                data: [
                    //{ x: 1, y: 3 },
                    //{ x: 2, y: 5 },
                    //{ x: 3, y: 2 },
                    //{ x: 4, y: 8 },
                    //{ x: 5, y: 4 },
                ],
                backgroundColor: '#171717',
                borderColor: '#111111',
                lineTension: 0.3,
                // pointLabels: false,
                showLine: true,
                fill: false

            },
            {# {
                // label: 'Scatter Chart',
                data: [
                    { x: 5, y: 4 },
                    { x: 5, y: 0 }
                ],
                backgroundColor: '#00ff00',
                borderColor: '#00ff00',
                lineTension: 0.3,
                // pointLabels: false,
                showLine: true,
                fill: false
            },
            {
                // label: 'Scatter Chart',
                data: [
                    { x: 5, y: 4 },
                    { x: 4, y: 0 }
                ],
                backgroundColor: '#0000ff',
                borderColor: '#0000ff',
                lineTension: 0.3,
                // pointLabels: false,
                showLine: true,
                fill: false
            },
            {
                // label: 'Scatter Chart',
                data: [
                    { x: 4, y: 8 },
                    { x: 4, y: 0 }
                ],
                backgroundColor: '#00ff00',
                borderColor: '#00ff00',
                lineTension: 0.3,
                // pointLabels: false,
                showLine: true,
                fill: false
            }, #}
        ],
    };

    // data modify methods
    function check_coridinate_exists(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            console.log("list : " + list[i])
            console.log("obj: " + obj)
            console.log(obj === list[i])
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    }
    function updateDataset(x1, y1, x2, y2) {
        g_data.datasets[1]['data'][0]['x'] = x1
        g_data.datasets[1]['data'][0]['y'] = y1
        g_data.datasets[1]['data'][1]['x'] = x2
        g_data.datasets[1]['data'][1]['y'] = y2
    }
    function addDataset(x1, y1, x2, y2, x3 = null, y3 = null, x4 = null, y4 = null) {
        if (current_val < 0) {
            straight = {
                // label: 'Scatter Chart',
                data: [
                    { x: x1, y: y1 },
                    { x: x2, y: y2 }
                ],
                backgroundColor: '#00ff00',
                borderColor: '#00ff00',
                lineTension: 0.3,
                // pointLabels: false,
                showLine: true,
                fill: false
            }
            g_data.datasets.push(straight)
        }
        else {
            straight = {
                // label: 'Scatter Chart',
                data: [
                    { x: x1, y: y1 },
                    { x: x2, y: y2 }
                ],
                backgroundColor: '#00ff00',
                borderColor: '#00ff00',
                lineTension: 0.3,
                // pointLabels: false,
                showLine: true,
                fill: false,
                borderDash: [5, 5],
            }
            g_data.datasets.push(straight)
            tangentLine = {
                // label: 'Scatter Chart',
                data: [
                    { x: x3, y: y3 },
                    { x: x4, y: y4 }
                ],
                backgroundColor: '#0000ff',
                borderColor: '#0000ff',
                lineTension: 0.3,
                // pointLabels: false,
                showLine: true,
                fill: false
            }
            g_data.datasets.push(tangentLine)
        }
        refreshChart()
    }

    function addData(x, y,start=null) {
        item = {
            'x': x,
            'y': y
        }
        if(val == 'bisection'){
            g_data.datasets[0].data.push(item)
            g_data.datasets[0].data.sort((a, b) => (a.x > b.x) ? 1 : -1)
            console.log(g_data.datasets[0].data)
            refreshChart()
        }else if(val == 'newtonRaphson' || val == "fixedPoint"){
            console.log("add data in graph working")
            g_data.datasets[0].data.splice(current_val  , 0, item)
            refreshChart()

        }


    }
    function updateDataBisection(x1, y1, x2, y2) {
        g_data.datasets[0].data.slice(current_val - 1)
        updateDataset(x1, y1, x2, y2)
        refreshChart()
    }
    function removeData(x, y) {
        item = {
            'x': x,
            'y': y
        }
        // console.log(item)
        // console.log(g_data.datasets[0].data)
        index = g_data.datasets[0].data.findIndex(object => {
            // console.log(object== item)
            return object.x == item.x
        })
        //console.log(index)
        halfBeforeTheUnwantedElement = g_data.datasets[0].data.slice(0, index)
        halfAfterTheUnwantedElement = g_data.datasets[0].data.slice(index + 1);
        g_data.datasets[0].data = halfBeforeTheUnwantedElement.concat(halfAfterTheUnwantedElement);
        // g_data.datasets[0].data.pop(index)
        g_data.datasets[0].data.sort((a, b) => (a.x > b.x) ? 1 : -1)
        if (g_data.datasets[0].data.length == 0) {
            console.log("working")
            console.log(g_data.datasets.length)
            console.log(g_data.datasets)
            g_data.datasets.pop()
            g_data.datasets.pop()
            console.log(g_data.datasets.length)
            console.log(g_data.datasets)
        }
        refreshChart()
    }

    // Set initial chart options
    var options = {
        animation: false,
        responsive: true,
        maintainAspectRatio: true,
        legend: {
            display: false, // Disable legend labels
        },
        scales: {
            x: {
                beginAtZero: true,
                position: 'center',
            },
            y: {
                beginAtZero: true,
                position: 'center',
            }

        },
        plugins: {
            zoom: {
                // Container for pan options
                pan: {
                    // Boolean to enable panning
                    enabled: true,

                    // Panning directions. Remove the appropriate direction to disable 
                    // Eg. 'y' would only allow panning in the y direction
                    mode: 'xy'
                },

                // Container for zoom options
                zoom: {
                    // Boolean to enable zooming
                    enabled: true,

                    // Zooming directions. Remove the appropriate direction to disable 
                    // Eg. 'y' would only allow zooming in the y direction
                    mode: 'xy',
                    // not working 
                    onZoom: function ({ chart }) {
                        console.log("working")
                        var meta = chart.getDatasetMeta(0);
                        x_min = meta.controller._xScale._startValue
                        x_max = meta.controller._xScale._endValue
                        y_min = meta.controller._yScale._startValue
                        y_max = meta.controller._yScale._endValue
                        /*console.log(x_min)
                        console.log(x_max)
                        console.log(y_min)
                        console.log(y_max)*/


                        /* var xScale = meta.xScale;
                            var yScale = meta.yScale;
                            var xMin = xScale.getValueForPixel(xScale.left);
                            var xMax = xScale.getValueForPixel(xScale.right);
                            var yMin = yScale.getValueForPixel(yScale.bottom);
                            var yMax = yScale.getValueForPixel(yScale.top);

                            console.log('xMin:', xMin);
                            console.log('xMax:', xMax);
                            console.log('yMin:', yMin);
                            console.log('yMax:', yMax); #
                        */
                    }
                    // end not working
                }
            },

        },
    };

    // Create the chart
    var myChart = new Chart(ctx, {
        type: chartType,
        data: g_data,
        options: options,
    });

    // Function to switch chart types
    function switchChartType() {

        myChart.destroy();

        if (g_data.datasets[0]['showLine']) {
            g_data.datasets[0]['showLine'] = false
        } else {
            g_data.datasets[0]['showLine'] = true
        }
        // Create a new chart with the updated type
        myChart = new Chart(ctx, {
            type: chartType,
            data: g_data,
            options: options,
        });

        // myChart.canvas.style.font-size = '12px';

    }
    function refreshChart() {
        myChart.destroy();

        // Create a new chart with the updated type
        myChart = new Chart(ctx, {
            type: chartType,
            data: g_data,
            options: options,
        });
    }
</script>